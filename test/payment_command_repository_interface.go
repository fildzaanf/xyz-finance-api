// Code generated by mockery v2.52.4. DO NOT EDIT.

package mocks

import (
	domain "xyz-finance-api/internal/payment/domain"

	mock "github.com/stretchr/testify/mock"
)

// PaymentCommandRepositoryInterface is an autogenerated mock type for the PaymentCommandRepositoryInterface type
type PaymentCommandRepositoryInterface struct {
	mock.Mock
}

// CreatePayment provides a mock function with given fields: payment
func (_m *PaymentCommandRepositoryInterface) CreatePayment(payment domain.Payment) (domain.Payment, error) {
	ret := _m.Called(payment)

	if len(ret) == 0 {
		panic("no return value specified for CreatePayment")
	}

	var r0 domain.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Payment) (domain.Payment, error)); ok {
		return rf(payment)
	}
	if rf, ok := ret.Get(0).(func(domain.Payment) domain.Payment); ok {
		r0 = rf(payment)
	} else {
		r0 = ret.Get(0).(domain.Payment)
	}

	if rf, ok := ret.Get(1).(func(domain.Payment) error); ok {
		r1 = rf(payment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLoanStatus provides a mock function with given fields: installmentID
func (_m *PaymentCommandRepositoryInterface) UpdateLoanStatus(installmentID string) error {
	ret := _m.Called(installmentID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLoanStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(installmentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePaymentStatus provides a mock function with given fields: installmentID, status
func (_m *PaymentCommandRepositoryInterface) UpdatePaymentStatus(installmentID string, status string) error {
	ret := _m.Called(installmentID, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePaymentStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(installmentID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPaymentCommandRepositoryInterface creates a new instance of PaymentCommandRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPaymentCommandRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *PaymentCommandRepositoryInterface {
	mock := &PaymentCommandRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
