// Code generated by mockery v2.52.4. DO NOT EDIT.

package mocks

import (
	domain "xyz-finance-api/internal/loan/domain"

	mock "github.com/stretchr/testify/mock"
)

// LoanCommandRepositoryInterface is an autogenerated mock type for the LoanCommandRepositoryInterface type
type LoanCommandRepositoryInterface struct {
	mock.Mock
}

// CreateLoan provides a mock function with given fields: loan
func (_m *LoanCommandRepositoryInterface) CreateLoan(loan domain.Loan) (domain.Loan, error) {
	ret := _m.Called(loan)

	if len(ret) == 0 {
		panic("no return value specified for CreateLoan")
	}

	var r0 domain.Loan
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Loan) (domain.Loan, error)); ok {
		return rf(loan)
	}
	if rf, ok := ret.Get(0).(func(domain.Loan) domain.Loan); ok {
		r0 = rf(loan)
	} else {
		r0 = ret.Get(0).(domain.Loan)
	}

	if rf, ok := ret.Get(1).(func(domain.Loan) error); ok {
		r1 = rf(loan)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLoanStatusByID provides a mock function with given fields: id, loan
func (_m *LoanCommandRepositoryInterface) UpdateLoanStatusByID(id string, loan domain.Loan) (domain.Loan, error) {
	ret := _m.Called(id, loan)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLoanStatusByID")
	}

	var r0 domain.Loan
	var r1 error
	if rf, ok := ret.Get(0).(func(string, domain.Loan) (domain.Loan, error)); ok {
		return rf(id, loan)
	}
	if rf, ok := ret.Get(0).(func(string, domain.Loan) domain.Loan); ok {
		r0 = rf(id, loan)
	} else {
		r0 = ret.Get(0).(domain.Loan)
	}

	if rf, ok := ret.Get(1).(func(string, domain.Loan) error); ok {
		r1 = rf(id, loan)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLoanCommandRepositoryInterface creates a new instance of LoanCommandRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLoanCommandRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *LoanCommandRepositoryInterface {
	mock := &LoanCommandRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
