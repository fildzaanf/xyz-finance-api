// Code generated by mockery v2.52.4. DO NOT EDIT.

package mocks

import (
	domain "xyz-finance-api/internal/loan/domain"

	mock "github.com/stretchr/testify/mock"
)

// LoanQueryRepositoryInterface is an autogenerated mock type for the LoanQueryRepositoryInterface type
type LoanQueryRepositoryInterface struct {
	mock.Mock
}

// GetAllLoans provides a mock function with given fields: userID
func (_m *LoanQueryRepositoryInterface) GetAllLoans(userID string) ([]domain.Loan, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllLoans")
	}

	var r0 []domain.Loan
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]domain.Loan, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) []domain.Loan); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Loan)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoanByID provides a mock function with given fields: id
func (_m *LoanQueryRepositoryInterface) GetLoanByID(id string) (domain.Loan, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetLoanByID")
	}

	var r0 domain.Loan
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.Loan, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) domain.Loan); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.Loan)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoanByUserID provides a mock function with given fields: userID, tenor
func (_m *LoanQueryRepositoryInterface) GetLoanByUserID(userID string, tenor int) (domain.Loan, error) {
	ret := _m.Called(userID, tenor)

	if len(ret) == 0 {
		panic("no return value specified for GetLoanByUserID")
	}

	var r0 domain.Loan
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int) (domain.Loan, error)); ok {
		return rf(userID, tenor)
	}
	if rf, ok := ret.Get(0).(func(string, int) domain.Loan); ok {
		r0 = rf(userID, tenor)
	} else {
		r0 = ret.Get(0).(domain.Loan)
	}

	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(userID, tenor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLoanQueryRepositoryInterface creates a new instance of LoanQueryRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLoanQueryRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *LoanQueryRepositoryInterface {
	mock := &LoanQueryRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
