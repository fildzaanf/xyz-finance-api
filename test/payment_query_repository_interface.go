// Code generated by mockery v2.52.4. DO NOT EDIT.

package mocks

import (
	domain "xyz-finance-api/internal/payment/domain"

	mock "github.com/stretchr/testify/mock"
)

// PaymentQueryRepositoryInterface is an autogenerated mock type for the PaymentQueryRepositoryInterface type
type PaymentQueryRepositoryInterface struct {
	mock.Mock
}

// GetAllPayments provides a mock function with given fields: userID
func (_m *PaymentQueryRepositoryInterface) GetAllPayments(userID string) ([]domain.Payment, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllPayments")
	}

	var r0 []domain.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]domain.Payment, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) []domain.Payment); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Payment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaymentByID provides a mock function with given fields: id, userID
func (_m *PaymentQueryRepositoryInterface) GetPaymentByID(id string, userID string) (domain.Payment, error) {
	ret := _m.Called(id, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetPaymentByID")
	}

	var r0 domain.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (domain.Payment, error)); ok {
		return rf(id, userID)
	}
	if rf, ok := ret.Get(0).(func(string, string) domain.Payment); ok {
		r0 = rf(id, userID)
	} else {
		r0 = ret.Get(0).(domain.Payment)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(id, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaymentByInstallmentID provides a mock function with given fields: installmentID
func (_m *PaymentQueryRepositoryInterface) GetPaymentByInstallmentID(installmentID string) (domain.Payment, error) {
	ret := _m.Called(installmentID)

	if len(ret) == 0 {
		panic("no return value specified for GetPaymentByInstallmentID")
	}

	var r0 domain.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.Payment, error)); ok {
		return rf(installmentID)
	}
	if rf, ok := ret.Get(0).(func(string) domain.Payment); ok {
		r0 = rf(installmentID)
	} else {
		r0 = ret.Get(0).(domain.Payment)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(installmentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPaymentQueryRepositoryInterface creates a new instance of PaymentQueryRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPaymentQueryRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *PaymentQueryRepositoryInterface {
	mock := &PaymentQueryRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
