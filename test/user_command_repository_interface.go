// Code generated by mockery v2.52.4. DO NOT EDIT.

package mocks

import (
	domain "xyz-finance-api/internal/user/domain"

	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"
)

// UserCommandRepositoryInterface is an autogenerated mock type for the UserCommandRepositoryInterface type
type UserCommandRepositoryInterface struct {
	mock.Mock
}

// LoginUser provides a mock function with given fields: email, password
func (_m *UserCommandRepositoryInterface) LoginUser(email string, password string) (domain.User, error) {
	ret := _m.Called(email, password)

	if len(ret) == 0 {
		panic("no return value specified for LoginUser")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (domain.User, error)); ok {
		return rf(email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) domain.User); ok {
		r0 = rf(email, password)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterUser provides a mock function with given fields: user, ktpPhoto, selfiePhoto
func (_m *UserCommandRepositoryInterface) RegisterUser(user domain.User, ktpPhoto *multipart.FileHeader, selfiePhoto *multipart.FileHeader) (domain.User, error) {
	ret := _m.Called(user, ktpPhoto, selfiePhoto)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUser")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.User, *multipart.FileHeader, *multipart.FileHeader) (domain.User, error)); ok {
		return rf(user, ktpPhoto, selfiePhoto)
	}
	if rf, ok := ret.Get(0).(func(domain.User, *multipart.FileHeader, *multipart.FileHeader) domain.User); ok {
		r0 = rf(user, ktpPhoto, selfiePhoto)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(domain.User, *multipart.FileHeader, *multipart.FileHeader) error); ok {
		r1 = rf(user, ktpPhoto, selfiePhoto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserCommandRepositoryInterface creates a new instance of UserCommandRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserCommandRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserCommandRepositoryInterface {
	mock := &UserCommandRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
