// Code generated by mockery v2.52.4. DO NOT EDIT.

package mocks

import (
	domain "xyz-finance-api/internal/transaction/domain"

	mock "github.com/stretchr/testify/mock"
)

// TransactionQueryRepositoryInterface is an autogenerated mock type for the TransactionQueryRepositoryInterface type
type TransactionQueryRepositoryInterface struct {
	mock.Mock
}

// GetAllTransactions provides a mock function with given fields: userID
func (_m *TransactionQueryRepositoryInterface) GetAllTransactions(userID string) ([]domain.Transaction, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllTransactions")
	}

	var r0 []domain.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]domain.Transaction, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) []domain.Transaction); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionByID provides a mock function with given fields: transactionID, userID
func (_m *TransactionQueryRepositoryInterface) GetTransactionByID(transactionID string, userID string) (domain.Transaction, error) {
	ret := _m.Called(transactionID, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionByID")
	}

	var r0 domain.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (domain.Transaction, error)); ok {
		return rf(transactionID, userID)
	}
	if rf, ok := ret.Get(0).(func(string, string) domain.Transaction); ok {
		r0 = rf(transactionID, userID)
	} else {
		r0 = ret.Get(0).(domain.Transaction)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(transactionID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTransactionQueryRepositoryInterface creates a new instance of TransactionQueryRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionQueryRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionQueryRepositoryInterface {
	mock := &TransactionQueryRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
