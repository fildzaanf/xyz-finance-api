// Code generated by mockery v2.52.4. DO NOT EDIT.

package mocks

import (
	domain "xyz-finance-api/internal/installment/domain"

	mock "github.com/stretchr/testify/mock"
)

// InstallmentCommandRepositoryInterface is an autogenerated mock type for the InstallmentCommandRepositoryInterface type
type InstallmentCommandRepositoryInterface struct {
	mock.Mock
}

// CreateInstallment provides a mock function with given fields: installment, userID
func (_m *InstallmentCommandRepositoryInterface) CreateInstallment(installment domain.Installment, userID string) (domain.Installment, error) {
	ret := _m.Called(installment, userID)

	if len(ret) == 0 {
		panic("no return value specified for CreateInstallment")
	}

	var r0 domain.Installment
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Installment, string) (domain.Installment, error)); ok {
		return rf(installment, userID)
	}
	if rf, ok := ret.Get(0).(func(domain.Installment, string) domain.Installment); ok {
		r0 = rf(installment, userID)
	} else {
		r0 = ret.Get(0).(domain.Installment)
	}

	if rf, ok := ret.Get(1).(func(domain.Installment, string) error); ok {
		r1 = rf(installment, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateInstallmentStatusByID provides a mock function with given fields: installmentID, installment
func (_m *InstallmentCommandRepositoryInterface) UpdateInstallmentStatusByID(installmentID string, installment domain.Installment) (domain.Installment, error) {
	ret := _m.Called(installmentID, installment)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInstallmentStatusByID")
	}

	var r0 domain.Installment
	var r1 error
	if rf, ok := ret.Get(0).(func(string, domain.Installment) (domain.Installment, error)); ok {
		return rf(installmentID, installment)
	}
	if rf, ok := ret.Get(0).(func(string, domain.Installment) domain.Installment); ok {
		r0 = rf(installmentID, installment)
	} else {
		r0 = ret.Get(0).(domain.Installment)
	}

	if rf, ok := ret.Get(1).(func(string, domain.Installment) error); ok {
		r1 = rf(installmentID, installment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewInstallmentCommandRepositoryInterface creates a new instance of InstallmentCommandRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInstallmentCommandRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *InstallmentCommandRepositoryInterface {
	mock := &InstallmentCommandRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
