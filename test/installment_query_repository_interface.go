// Code generated by mockery v2.52.4. DO NOT EDIT.

package mocks

import (
	domain "xyz-finance-api/internal/installment/domain"

	mock "github.com/stretchr/testify/mock"
)

// InstallmentQueryRepositoryInterface is an autogenerated mock type for the InstallmentQueryRepositoryInterface type
type InstallmentQueryRepositoryInterface struct {
	mock.Mock
}

// CountInstallmentsByTransactionID provides a mock function with given fields: transactionID
func (_m *InstallmentQueryRepositoryInterface) CountInstallmentsByTransactionID(transactionID string) (int, error) {
	ret := _m.Called(transactionID)

	if len(ret) == 0 {
		panic("no return value specified for CountInstallmentsByTransactionID")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int, error)); ok {
		return rf(transactionID)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(transactionID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(transactionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllInstallments provides a mock function with given fields: userID
func (_m *InstallmentQueryRepositoryInterface) GetAllInstallments(userID string) ([]domain.Installment, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllInstallments")
	}

	var r0 []domain.Installment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]domain.Installment, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) []domain.Installment); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Installment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstallmentByID provides a mock function with given fields: installmentID, userID
func (_m *InstallmentQueryRepositoryInterface) GetInstallmentByID(installmentID string, userID string) (domain.Installment, error) {
	ret := _m.Called(installmentID, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetInstallmentByID")
	}

	var r0 domain.Installment
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (domain.Installment, error)); ok {
		return rf(installmentID, userID)
	}
	if rf, ok := ret.Get(0).(func(string, string) domain.Installment); ok {
		r0 = rf(installmentID, userID)
	} else {
		r0 = ret.Get(0).(domain.Installment)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(installmentID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstallmentByTransactionID provides a mock function with given fields: transactionID
func (_m *InstallmentQueryRepositoryInterface) GetInstallmentByTransactionID(transactionID string) ([]domain.Installment, error) {
	ret := _m.Called(transactionID)

	if len(ret) == 0 {
		panic("no return value specified for GetInstallmentByTransactionID")
	}

	var r0 []domain.Installment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]domain.Installment, error)); ok {
		return rf(transactionID)
	}
	if rf, ok := ret.Get(0).(func(string) []domain.Installment); ok {
		r0 = rf(transactionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Installment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(transactionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewInstallmentQueryRepositoryInterface creates a new instance of InstallmentQueryRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInstallmentQueryRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *InstallmentQueryRepositoryInterface {
	mock := &InstallmentQueryRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
